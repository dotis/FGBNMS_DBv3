---
title: "Flower Garden Banks Data Dash"
format: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
# whatever is in this chunk gets run before any other chunk
# install.packages("rerddap")
# install.packages("plotdap")
# install.packages("mapdata")
# install.packages("leaflet")
# install.packages("stringr")
# install.packages("dplyr")
# install.packages("readr")
# install.packages("here")
# install.packages("flexdashboard")
# put your libary loading here:
library("rerddap")
library("mapdata")
library("plotdap")
library("leaflet")
library("stringr")
library("dplyr")
library("leafem")
library("readr")
library("here")
library("flexdashboard")
```

```{r}
# source(here::here("scripts/functions.R")) 
dashboard <- "FGBNMS"
# Set Bounds from "ROI_INFO.csv" (can add other columns)
site <- read_csv("data/ROI_INFO.csv", col_types=cols()) %>%  # Pull ROI bounds from file.
filter(grepl(dashboard, ROI))
# slat <- site$slat; nlat <- site$nlat ; wlon <- site$wlon; elon <- site$elon
# For some reason, bounds don't set exactly right. Some sort of buffer? Depends on view/render?
# Set manually for now
# Could pull ERDDAP data from all of GoM instead and just zoom to ROI.
slat <- 25; nlat <- 30.0 ; wlon <- -95; elon <- -90
date_tmp <- '2017-01-01'
# L3 Ocean Color from IMaRS (ERDDAP)
sst4   <- info('moda_sst4_7d_fgb'         , url = "http://131.247.136.200:8080/erddap/")
chl   <- info('moda_oc_7d_fgb'         , url = "http://131.247.136.200:8080/erddap/")
# Seascapes from AOML Coastwatch (ERDDAP)
#  scape <- info("noaa_aoml_4729_9ee6_ab54", url = "https://cwcgom.aoml.noaa.gov/erddap/")
get_dates <- function(info){
  info$alldata$time %>%
    filter(attribute_name=="actual_range") %>%
    pull(value) %>%
    str_split(", ", simplify = T) %>%
    as.numeric() %>%
    as.POSIXct(origin = "1970-01-01", tz = "GMT")
}
# get most recent date
d <- get_dates(chl)[2]
# write a function here to make an image plot
# Inputs: ERDDAP URL, dataset, title, color scale info.
ERDDAPUrl_chl <- 'http://131.247.136.200:8080/erddap/wms/moda_oc_7d_fgb/request?'
field_chl <- "moda_oc_7d_fgb:chlor_a_median"
ERDDAPUrl_sst <- 'http://131.247.136.200:8080/erddap/wms/moda_sst4_7d_fgb/request?'
field_sst <- "moda_sst4_7d_fgb:sst4_a_median"
img_time_stmp <- "2022-09-02T00:00:00Z" # pull from filenames


# Output: Plot figures - start with a basic tabset w/CHL and SST, add SS later
chl_img <- function(ERDDAPUrl_chl,field_chl,img_time_stmp,wlon,slat,elon,nlat){
   # Leaflet map
 leaflet(options = leafletOptions(crs = leafletCRS(crsClass = "L.CRS.EPSG4326"))) %>%
   # basemap from GBIF in 4326
   addTiles("//tile.gbif.org/4326/omt/{z}/{x}/{y}@1x.png?style=gbif-geyser") %>%
   # Call to IMaRS ERDDAP (chlor_a)
   addWMSTiles(
     baseUrl = ERDDAPUrl_chl,
     layers = field_chl,
     options = WMSTileOptions(
       version = "1.3.0", format = "image/png", transparent = T, opacity = 0.7,
       time = img_time_stmp)) %>%
   addMouseCoordinates() %>%
 fitBounds(wlon, slat, elon, nlat) %>%
  addLegend(
     position="bottomright",
     title = paste0("CHLa (mg m^-3)<br>", date_tmp),
     colorNumeric("Spectral", c(0,30), reverse=T), seq(0,30))
  }

sst_img <- function(ERDDAPUrl_sst,field_sst,img_time_stmp,wlon,slat,elon,nlat){
   # Leaflet map
 leaflet(options = leafletOptions(crs = leafletCRS(crsClass = "L.CRS.EPSG4326"))) %>%
   # basemap from GBIF in 4326
   addTiles("//tile.gbif.org/4326/omt/{z}/{x}/{y}@1x.png?style=gbif-geyser") %>%
   # Call to IMaRS ERDDAP (chlor_a)
   addWMSTiles(
     baseUrl = ERDDAPUrl_sst,
     layers = field_sst,
     options = WMSTileOptions(
       version = "1.3.0", format = "image/png", transparent = T, opacity = 0.7,
       time = img_time_stmp)) %>%
   addMouseCoordinates() %>%
 fitBounds(wlon, slat, elon, nlat) %>%
  addLegend(
     position="bottomright",
     title = paste0("SST (DegC)<br>", date_tmp),
     colorNumeric("Spectral", c(0,32), reverse=T), seq(0,32))
  }


```
## Map image 

![](data/FGBdb_map_2021.png){width=900}

::: {.panel-tabset}

## Chlorophyll-a
```{r}
chl_img(ERDDAPUrl_chl,field_chl,img_time_stmp,wlon,slat,elon,nlat)
```

## SST
```{r}
sst_img(ERDDAPUrl_sst,field_sst,img_time_stmp,wlon,slat,elon,nlat)
```
:::

